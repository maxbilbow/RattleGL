//
//  Particle.h
//  OpenGL 2.0
//
//  Created by Max Bilbow on 23/01/2015.
//  Copyright (c) 2015 Rattle Media Ltd. All rights reserved.
//

#ifndef OpenGL_2_0_Particle_h
#define OpenGL_2_0_Particle_h


#endif
#include "Physics.h"


@protocol SimpleParticle //: RMXObject
@property GLKVector3 position, velocity,acceleration, forwardVector, upVector, leftVector, forwardV, upV, leftV;
@property Physics * physics;
@property float accelerationRate, speedLimit,ground,rotationSpeed,jumpStrength, mass;
@property bool limitSpeed, hasFriction, hasGravity;
- (id)initWithName:(NSString*)name;
//- (void)setVelocity:(GLKVector3)acceleration;
//- (float)getForwardVelocity;
//- (float)getUpVelocity;
//- (float)getLeftVelocity;
- (GLKVector3)getEye;
- (GLKVector3)getCenter;
- (GLKVector3)getUp;

//- (void)setPosition:(GLKVector3)v;
- (void)accelerateForward:(float)velocity;
- (void)accelerateUp:(float)velocity;
- (void)accelerateLeft:(float)velocity;
- (void)forwardStop;
- (void)upStop;
- (void)leftStop;

- (NSString*)describePosition ;

//- (GLKVector3)getVelocity;
@end
/*
@implementation SimpleParticle
    /* ATTRIBUTES
     - Position
     - Velocity
     - (acceloration? Could be an external input)
     - LookAt
     - Up
     - Right
     */ /*
@synthesize position = _position, velocity = _velocity ,acceleration = _acceleration, forwardVector = _forwardVector, upVector = _upVector, leftVector = _leftVector, forwardV = _forwardV, upV = _upV, leftV = _leftV, physics = _physics, accelerationRate = _accelerationRate, speedLimit = _speedLimit,ground = _ground,rotationSpeed = _rotationSpeed,jumpStrength = _jumpStrength,limitSpeed = _limitSpeed, mass = _mass;
@synthesize hasFriction = _hasFriction, hasGravity = _hasGravity;



- (id)initWithName:(NSString*)name
{
    self = [super initWithName:name];
    if (self) {
        _position = GLKVector3Make(0, 0, 0);
        //position = GLKVector3Make(0, 0, 0);
        _velocity = GLKVector3Make(0, 0, 0);
        _acceleration = GLKVector3Make(0, 0, 0);
        _forwardVector = GLKVector3Make(0, 0, 1);
        _upVector = GLKVector3Make(0, 1, 0);
        _leftVector = GLKVector3Make(1, 0, 0);
        _forwardV = GLKVector3Make(0, 0, 0);
        _upV = GLKVector3Make(0, 0, 0);
        _leftV = GLKVector3Make(0, 0, 0);

        _physics = [[Physics alloc] initWithName:name];;
        // NSLog(@"init: %@ at:%p",name,&_position);
        return self;
    } else {
        NSLog(@"%@ Not Initialised!",self);
        exit(0);
    }
    
    
}

// Dealloc method should always follow init method
- (void)dealloc
{
    // Remove any observers or free any necessary cache, etc.
    
}

- (void)toggleGravity
{
    _hasGravity = !_hasGravity;
}

- (void)toggleFriction
{
    _hasFriction = !_hasFriction;
}


- (GLKVector3)getLeftVector
{
    return _leftVector;
}


- (GLKVector3)getEye
{
    return _position;
}
    
- (GLKVector3)getCenter
{
    return GLKVector3Add(_position,_forwardVector);
}
    
- (GLKVector3)getUp
{
    return _upVector;
}
- (void)accelerateForward:(float)v
{
    _acceleration.z = v * _accelerationRate;
    
}

- (void)accelerateUp:(float)v
{
    _acceleration.y = v * _accelerationRate;
    //  accelerate();
    //       accelerate(GLKVector3Make(0,velocity*accelerationRate,0));
}

- (void)accelerateLeft:(float)v
{
    _acceleration.x = v * _accelerationRate;
    //accelerate();//accelerate(GLKVector3Make(velocity*accelerationRate,0,0));
}


- (void)forwardStop
{
    _acceleration.z = 0;
}

- (void)upStop
{
    _acceleration.y = 0;// -velocity.y;
}

- (void)leftStop
{
    _acceleration.x = 0;// -velocity.x;
}


- (void)accelerate
{
    _acceleration.y =/* (_position.y <= _ground) ? 0 : */ /*[_physics gravity];
    [self setVelocity:_acceleration]; //Need to calculate this
    
    if (_limitSpeed){
        for (int i=0;i<3;++i)
            if ([self velocity].v[i] > _speedLimit){
                //[rmxDebugger add:RMX_SIMPLE_PARTICLE n:self.name t:[NSString stringWithFormat:@"speed%i = %f",i,[self velocity].v[i]]];
                [self velocity].v[i] = _speedLimit;
            } else if ([self velocity].v[i] < -_speedLimit){
                //[rmxDebugger add:RMX_SIMPLE_PARTICLE n:self.name t:[NSString stringWithFormat:@"speed%i = %f",i,[self velocity].v[i]]];
                [self velocity].v[i] = -_speedLimit;
            } //else
                //[rmxDebugger add:RMX_SIMPLE_PARTICLE n:self.name t:[NSString stringWithFormat:@"speed%i OK: %f",i,[self velocity].v[i]]];
    }
    

    [rmxDebugger add:RMX_ERROR n:@"Shapes" t:[NSString stringWithFormat:@"%@: VELY: %f, MEMY: %p",self.name,[self velocity].y,&_velocity]];
    
    
}

- (NSString*)describePosition {
    return [NSString stringWithFormat:@"\nPos: %f, %f, %f (%p)\nVel: %f, %f, %f (%p)\nAcc: %f, %f, %f (%p)\n", _position.x,_position.y,self.position.z,&_position,self.velocity.x,self.velocity.y,self.velocity.z,&_velocity,self.acceleration.x,self.acceleration.y,self.acceleration.z,&_acceleration ];
   }

- (void)debug {
    [super debug];
    [rmxDebugger add:RMX_SIMPLE_PARTICLE n:self t:[self describePosition]];
}

@end */